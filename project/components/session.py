"""Session settings"""


# Если используется хранилище сеансов на основе кэша.
# Выбирается используемый кэш.
SESSION_CACHE_ALIAS = "default"

# Возраст сеансовых файлов cookie в секундах.
SESSION_COOKIE_AGE = 1209600  # 2 weeks, in seconds

# Домен, используемый для сеансовых файлов cookie. Установите это значение
# в строку типа "example.com" для междоменных файлов cookie или не используйте
# их для стандартных файлов cookie домена.
SESSION_COOKIE_DOMAIN = None

# Следует ли использовать флаг HttpOnly в файле cookie сеанса. Если это
# значение равно True, клиентский JavaScript не сможет получить доступ
# к файлу cookie сеанса.
SESSION_COOKIE_HTTPONLY = True

# Имя файла cookie, который будет использоваться для сеансов. Может быть
# произвольным (при условии, что оно отличается от других имен файлов
# cookie в вашем приложении).
SESSION_COOKIE_NAME = 'sessionid'

# Путь, заданный в файле cookie сеанса. Должен совпадать с URL-адресом
# установки Django, либо быть родительским для этого пути. Это полезно,
# если есть несколько экземпляров Django, работающих под одним и тем же
# именем хоста. Они могут использовать разные пути к файлам cookie, и
# каждый экземпляр будет видеть только свой собственный файл cookie сеанса.
SESSION_COOKIE_PATH = '/'

# Значение того же флага сайта в файле cookie сеанса. Этот флаг предотвращает
# отправку файлов cookie в межсайтовых запросах, тем самым предотвращая атаки
# CSRF и делая невозможными некоторые методы кражи файлов cookie сеанса.
# Возможные значения:
# 'Strict' - предотвращает отправку файлов cookie браузером на целевой сайт во
# всех контекстах межсайтового просмотра, даже при переходе по обычной ссылке.
# 'Lax' (default) - обеспечивает баланс между безопасностью и удобством
# использования для веб-сайтов, которые хотят поддерживать сеанс входа
# пользователя в систему после того, как пользователь переходит по
# внешней ссылке.
# 'None' (string) - файл cookie сеанса будет отправлен со всеми запросами
# на один и тот же сайт и между сайтами.
# False - отключает флаг.
SESSION_COOKIE_SAMESITE = 'Lax'

# Следует ли использовать безопасный файл cookie для файла cookie сеанса.
# Если это значение равно True, файл cookie будет помечен как “безопасный”,
# что означает, что браузеры могут гарантировать, что файл cookie отправляется
# только по HTTPS-соединению. Оставлять этот параметр выключенным не очень
# хорошая идея, потому что злоумышленник может захватить незашифрованный файл
# cookie сеанса с помощью анализатора пакетов и использовать его для захвата
# сеанса пользователя.
SESSION_COOKIE_SECURE = False

# Управляет тем, где Django хранит данные сеанса.
# Варианты:
# 'django.contrib.sessions.backends.db'
# 'django.contrib.sessions.backends.file'
# 'django.contrib.sessions.backends.cache'
# 'django.contrib.sessions.backends.cached_db'
# 'django.contrib.sessions.backends.signed_cookies'
SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Истечет ли срок действия сеанса, когда пользователь закроет свой браузер.
SESSION_EXPIRE_AT_BROWSER_CLOSE = False

# Если вы используете файловое хранилище сеансов, это задает каталог,
# в котором Django будет хранить данные сеанса. Если используется значение
# по умолчанию (None), Django будет использовать стандартный временный
# каталог для системы.
SESSION_FILE_PATH = None

# Следует ли сохранять данные сеанса при каждом запросе. Если это значение
# False (default), то данные сеанса будут сохранены только в том случае,
# если они были изменены, то есть если какое – либо из его значений словаря
# было назначено или удалено. Пустые сеансы не будут созданы, даже если
# этот параметр активен.
SESSION_SAVE_EVERY_REQUEST = False

# Полный путь импорта класса сериализатора, используемого для сериализации
# данных сеанса.
# Варианты:
# 'django.contrib.sessions.serializers.PickleSerializer'
# 'django.contrib.sessions.serializers.JSONSerializer'
SESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'
